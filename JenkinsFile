pipeline {
    agent any
    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '10'))
        timeout(time: 12, unit: 'HOURS')
        timestamps()
    }
    parameters {
        string(name: 'TARGET_MACHINE', description: 'Test machine on which MDT deployment shall begin', trim: true)
    }
    environment {
                
        // Default build server for TICS build jobs. Do not modify.
        PIPE_CERT_PATH = "Output\\Stash"
        PIPE_STASH_ID = "Certificates"

        
    }
    
    stages {
        stage('Cert Update from WU') {
            agent { label 'NLYBSTQVP4VW61T' }
            steps {
                script {
		    // define where certs needs to downloaded
                    println "workspace path is  at: ${env.WORKSPACE}"
                    def workspacePath = "${env.PIPE_CERT_PATH}\\roots.sst"
                    println "workspace path is  at: ${workspacePath}"
                    def psScriptPath = 'UpdateCerts.ps1'
                    
		    powershell(returnStatus: true, script: "Invoke-Expression -Command \".\\${psScriptPath} -sstFilePath '$env.PIPE_CERT_PATH'\"")
                    // Construct the full path

                    // Machine names shall always be in uppercase. Otherwise slave node cannot be identified by Jenkins.
                    TARGET_MACHINE = TARGET_MACHINE.toUpperCase()
                    // stash includes: "Output/roots.sst", name: 'sstFile'
					stash name: PIPE_STASH_ID, includes: "${PIPE_CERT_PATH}\\**", useDefaultExcludes: true
                }
            }
        }

        stage('Unstash and Verify on TestServer') {
            agent { label 'NLYBSTQVP4VW61T' }
            steps {
                // Unstash the roots.sst file
                unstash PIPE_STASH_ID

                // Check if the file exists in the proper location
                script {
		    def testNodes = nodesByLabel('AmbikaTest')
		    echo "Test Nodes:"
                    testNodes.each { node ->
                        echo "- ${node}"
                    }
		
                    // Iterate over the nodes
                    for (def nodes in testNodes) {
			node(nodes) {
                            echo "Hello from ${nodes}"
                            // Other tasks specific to this node
                        }
                        // Execute your PowerShell script on each node
                        //def psScriptPath = 'Test.ps1'
                    //def workspacePath = "${env.PIPE_CERT_PATH}\\roots.sst"
                    // Execute the PowerShell script

                    //powershell(returnStatus: true,-ExecutionPolicy "Bypass", script: "Invoke-Expression -Command \".\\${psScriptPath} -sstFilePath '$workspacePath'\"")
                    // Construct the full path
                    }
                    // Get the script directory
                    //def psScriptPath = 'Test.ps1'
                    //def workspacePath = "${env.PIPE_CERT_PATH}\\roots.sst"
                    // Execute the PowerShell script

                    //powershell(returnStatus: true, script: "Invoke-Expression -Command \".\\${psScriptPath} -sstFilePath '$workspacePath'\"")
                    // Construct the full path
                    
                }
            }
        }

        stage('Cert Update') {
            agent { label 'AmbikaTest' }
            steps {
                script {   
                    def psScriptPath = 'UpdateCerts.ps1'
                    // Execute the PowerShell script
                    powershell(returnStatus: true, script: "Invoke-Expression -Command .\\${psScriptPath}")
                    // powershell script: "${UPDATE_CERT_SCRIPT_PATH}"

                }
            }
        }
        
    }
    post {
        failure {
            println("FAILED")
        }
        success {
            //    sendMail("SUCCEEDED", "")
            script {
                println "MDT deployment completed successfully on ${TARGET_MACHINE} "
            }
        }
        aborted {
            println("ABORTED")
        }
    }
}
