pipeline {
    agent any
    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '10'))
        timeout(time: 12, unit: 'HOURS')
        timestamps()
    }
    parameters {
        string(name: 'TARGET_MACHINE', description: 'Test machine on which MDT deployment shall begin', trim: true)
    }
    stages {
        stage('PreCheck') {
            agent { label 'NLYBSTQVP4VW61T' }
            steps {
                script {
                    // Update the build id.
                    println "MDT deployment started on machine ${TARGET_MACHINE} "
                    currentBuild.displayName = "${TARGET_MACHINE}"
                    println "workspace path is  at: ${env.WORKSPACE}"
                    def workspacePath = "${env.WORKSPACE}\\Output\\roots.sst"
                    println "workspace path is  at: ${workspacePath}"
                    bat 'certutil.exe -generateSSTFromWU "C:\\ProdJenkins3\\workspace\\Sandbox\\Ambika\\TestingImportCert\\Output\\roots.sst"'
                    

                    // Machine names shall always be in uppercase. Otherwise slave node cannot be identified by Jenkins.
                    TARGET_MACHINE = TARGET_MACHINE.toUpperCase()
                    stash includes: "Output/roots.sst", name: 'sstFile'
                }
            }
        }

        stage('Unstash and Verify on TestServer') {
            agent {
                label 'AmbikaTest'
            }
            steps {
                // Unstash the roots.sst file
                unstash 'sstFile'

                // Check if the file exists in the proper location
                script {
                    def sstFilePath = "${env.WORKSPACE}\\roots.sst"
                    if (fileExists(sstFilePath)) {
                        echo "roots.sst exists at: ${sstFilePath}"
                    } else {
                        error "roots.sst not found!"
                    }
                }
            }
        }
        stage('Cert Update') {
            agent { label 'AmbikaTest' }
            steps {
                script {   
                        def psScriptPath = 'UpdateCerts.ps1'
                        // Execute the PowerShell script
                        powershell(returnStatus: true, script: "Invoke-Expression -Command .\\${psScriptPath}")
                        // powershell script: "${UPDATE_CERT_SCRIPT_PATH}"

                }
            }
        }
        
    }
    post {
        failure {
            println("FAILED")
        }
        success {
        //    sendMail("SUCCEEDED","")
            script {
                println "MDT deployment completed successfully on ${TARGET_MACHINE} "
            }
        }
        aborted {
            println("ABORTED")
        }
    }

}
